from sqlalchemy import create_engine
from sqlalchemy.ext.declarative import declarative_base
from sqlalchemy.orm import sessionmaker
from app.core.config import settings

# ‚úÖ Connexion √† la base de donn√©es MySQL (remplacement du driver si n√©cessaire)
SQLALCHEMY_DATABASE_URL = settings.DATABASE_URL.replace("mysql://", "mysql+pymysql://")

# ‚úÖ Cr√©ation de l'engine SQLAlchemy
try:
    engine = create_engine(SQLALCHEMY_DATABASE_URL, pool_pre_ping=True)
    print("‚úÖ Connexion √† la base de donn√©es r√©ussie.")
except Exception as e:
    print(f"‚ùå Erreur de connexion √† la base de donn√©es : {e}")

# ‚úÖ Cr√©ation d'une session locale
SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)

# ‚úÖ Base pour les mod√®les SQLAlchemy
Base = declarative_base()

# ‚úÖ Fonction pour r√©cup√©rer la session de la base de donn√©es
def get_db():
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()

# ‚úÖ Initialisation de la base de donn√©es (cr√©ation automatique des tables)
def init_db():
    try:
        print("üîÑ V√©rification et cr√©ation des tables...")
        Base.metadata.create_all(bind=engine)
        print("‚úÖ Tables cr√©√©es avec succ√®s (si elles n'existaient pas).")
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation des tables : {e}")
